manifest {
    name = 'oalmelid/baal-nf'
    author = 'Ã˜yvind Almelid'
    homePage = 'https://git.ecdf.ed.ac.uk/oalmelid/baal-nf'
    description = 'ChIP seq ASB detection pipeline'
    mainScript = 'main.nf'
    nextflowVersion = '>=22.04.5'
    version = '0.8.0'
}

params {
    assembly = "hg19"
    annotation_file = "${projectDir}/data/ensembl_annotations.bed.gz"
    igenomes_root = "s3://ngi-igenomes/igenomes/Homo_sapiens/UCSC/${->params.assembly}/Sequence"

    
    sample_file = ""
    report_dir = "${launchDir}/reports"
    genome = "genome"
    fastqc_conf_pre = "${projectDir}/data/before_limits.txt"
    fastqc_conf_post = "${projectDir}/data/after_limits.txt"
    fastq_screen_cache = "${launchDir}/assets/fastq_screen"
    genomepy_cache = "${launchDir}/assets/genomepy"
    jaspar_cache = "${launchDir}/assets/jaspar"
    k = 8
    gat_num_samples = 1000
    run_gat = true
    baal_chip_env = null
    save_baal_objects = false
    motif_kmer_length = 8
    confidence_levels = [0.95, 0.99]
    dedup_umi = false
    umi_tools_options = ""

    // individual report directories, rarely needs to be changed
    pipeline_report_dir = "${->params.report_dir}/pipeline_info"
    baal_report_dir="${->params.report_dir}/baal_reports"
    baal_object_dir="${->params.report_dir}/baal_objects"
    baal_output_dir="${->params.report_dir}/asb"
    multiqc_report_dir="${->params.report_dir}/multiQC"
    gat_output_dir="${->params.report_dir}/enrichment"
    bowtie2_index = "${->params.igenomes_root}/Bowtie2Index/"
    nopeak_index = "${->params.igenomes_root}/Chromosomes/"
    tfomics_index = "${->params.igenomes_root}/Chromosomes/WholeGenomeFasta/genome.fa"
}

profiles {
    eddie {
        includeConfig 'conf/eddie.config'
    }

    gls {
        includeConfig 'conf/gls.config'
    }

    conda {
        includeConfig 'conf/conda.config'
    }

    singularity {
        includeConfig 'conf/singularity.config'
    }
    
    docker {
        includeConfig 'conf/docker.config'
    }

    test {
        includeConfig 'conf/test.config'
    }
    ultra2 {
        includeConfig 'conf/ultra2.config'
    }
}

process {
    cpus=1
    ext.baseMemory = 8.GB
    memory = { task.ext.baseMemory * task.attempt }

    withLabel: bigmem {
        memory = { task.ext.baseMemory * task.attempt * 8 }
    }

    withLabel: parallel {
        cpus = 4
    }

    errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
    maxRetries = 3
}

report {
    enabled = true
    overwrite = true
    file = "${->params.pipeline_report_dir}/report.html"
}

timeline {
    enabled = true
    overwrite = true
    file = "${->params.pipeline_report_dir}/timeline.html"
}

trace {
    enabled = true
    overwrite = true
    file = "${->params.pipeline_report_dir}/trace.txt"
}

dag {
    enabled = true
    overwrite = true
    file = "${->params.pipeline_report_dir}/pipeline.svg"
}

